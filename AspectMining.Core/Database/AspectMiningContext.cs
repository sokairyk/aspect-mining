#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AspectMining.Core.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AspectMining")]
	public partial class AspectMiningContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDatasetType(DatasetType instance);
    partial void UpdateDatasetType(DatasetType instance);
    partial void DeleteDatasetType(DatasetType instance);
    partial void InsertPhrase(Phrase instance);
    partial void UpdatePhrase(Phrase instance);
    partial void DeletePhrase(Phrase instance);
    partial void InsertPhrasePolaritySentenceMapping(PhrasePolaritySentenceMapping instance);
    partial void UpdatePhrasePolaritySentenceMapping(PhrasePolaritySentenceMapping instance);
    partial void DeletePhrasePolaritySentenceMapping(PhrasePolaritySentenceMapping instance);
    partial void InsertPhraseProductMapping(PhraseProductMapping instance);
    partial void UpdatePhraseProductMapping(PhraseProductMapping instance);
    partial void DeletePhraseProductMapping(PhraseProductMapping instance);
    partial void InsertPhraseTermMapping(PhraseTermMapping instance);
    partial void UpdatePhraseTermMapping(PhraseTermMapping instance);
    partial void DeletePhraseTermMapping(PhraseTermMapping instance);
    partial void InsertPOSType(POSType instance);
    partial void UpdatePOSType(POSType instance);
    partial void DeletePOSType(POSType instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    partial void InsertSentence(Sentence instance);
    partial void UpdateSentence(Sentence instance);
    partial void DeleteSentence(Sentence instance);
    partial void InsertSentencePhraseMapping(SentencePhraseMapping instance);
    partial void UpdateSentencePhraseMapping(SentencePhraseMapping instance);
    partial void DeleteSentencePhraseMapping(SentencePhraseMapping instance);
    partial void InsertSentencePhraseTermMapping(SentencePhraseTermMapping instance);
    partial void UpdateSentencePhraseTermMapping(SentencePhraseTermMapping instance);
    partial void DeleteSentencePhraseTermMapping(SentencePhraseTermMapping instance);
    partial void InsertTerm(Term instance);
    partial void UpdateTerm(Term instance);
    partial void DeleteTerm(Term instance);
    #endregion
		
		public AspectMiningContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AspectMiningContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AspectMiningContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AspectMiningContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DatasetType> DatasetType
		{
			get
			{
				return this.GetTable<DatasetType>();
			}
		}
		
		public System.Data.Linq.Table<Phrase> Phrase
		{
			get
			{
				return this.GetTable<Phrase>();
			}
		}
		
		public System.Data.Linq.Table<PhrasePolaritySentenceMapping> PhrasePolaritySentenceMapping
		{
			get
			{
				return this.GetTable<PhrasePolaritySentenceMapping>();
			}
		}
		
		public System.Data.Linq.Table<PhraseProductMapping> PhraseProductMapping
		{
			get
			{
				return this.GetTable<PhraseProductMapping>();
			}
		}
		
		public System.Data.Linq.Table<PhraseTermMapping> PhraseTermMapping
		{
			get
			{
				return this.GetTable<PhraseTermMapping>();
			}
		}
		
		public System.Data.Linq.Table<POSType> POSType
		{
			get
			{
				return this.GetTable<POSType>();
			}
		}
		
		public System.Data.Linq.Table<Product> Product
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Review> Review
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
		
		public System.Data.Linq.Table<Sentence> Sentence
		{
			get
			{
				return this.GetTable<Sentence>();
			}
		}
		
		public System.Data.Linq.Table<SentencePhraseMapping> SentencePhraseMapping
		{
			get
			{
				return this.GetTable<SentencePhraseMapping>();
			}
		}
		
		public System.Data.Linq.Table<SentencePhraseTermMapping> SentencePhraseTermMapping
		{
			get
			{
				return this.GetTable<SentencePhraseTermMapping>();
			}
		}
		
		public System.Data.Linq.Table<Term> Term
		{
			get
			{
				return this.GetTable<Term>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_diagramobjects", IsComposable=true)]
		[return: global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")]
		public System.Nullable<int> Fn_diagramobjects()
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_alterdiagram")]
		[return: global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")]
		public int Sp_alterdiagram([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string diagramname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> owner_id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> version, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_creatediagram")]
		[return: global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")]
		public int Sp_creatediagram([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string diagramname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> owner_id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> version, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_dropdiagram")]
		[return: global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")]
		public int Sp_dropdiagram([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string diagramname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_helpdiagramdefinition")]
		public ISingleResult<Sp_helpdiagramdefinitionResult> Sp_helpdiagramdefinition([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string diagramname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramdefinitionResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_helpdiagrams")]
		public ISingleResult<Sp_helpdiagramsResult> Sp_helpdiagrams([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string diagramname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_renamediagram")]
		[return: global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")]
		public int Sp_renamediagram([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string diagramname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> owner_id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string new_diagramname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, new_diagramname);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DatasetType")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DatasetType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private EntitySet<Sentence> _Sentence;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public DatasetType()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Sentence_DatasetType", Storage="_Sentence", ThisKey="Id", OtherKey="DatasetTypeId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<Sentence> Sentence
		{
			get
			{
				if ((this.serializing 
							&& (this._Sentence.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sentence;
			}
			set
			{
				this._Sentence.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sentence(Sentence entity)
		{
			this.SendPropertyChanging();
			entity.DatasetType = this;
		}
		
		private void detach_Sentence(Sentence entity)
		{
			this.SendPropertyChanging();
			entity.DatasetType = null;
		}
		
		private void Initialize()
		{
			this._Sentence = new EntitySet<Sentence>(new Action<Sentence>(this.attach_Sentence), new Action<Sentence>(this.detach_Sentence));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phrase")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Phrase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private short _POSId;
		
		private string _Text;
		
		private string _PreprocessedText;
		
		private EntityRef<POSType> _POSType;
		
		private EntityRef<PhrasePolaritySentenceMapping> _PhrasePolaritySentenceMapping;
		
		private EntitySet<PhraseProductMapping> _PhraseProductMapping;
		
		private EntitySet<PhraseTermMapping> _PhraseTermMapping;
		
		private EntitySet<SentencePhraseMapping> _SentencePhraseMapping;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPOSIdChanging(short value);
    partial void OnPOSIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnPreprocessedTextChanging(string value);
    partial void OnPreprocessedTextChanged();
    #endregion
		
		public Phrase()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POSId", DbType="SmallInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public short POSId
		{
			get
			{
				return this._POSId;
			}
			set
			{
				if ((this._POSId != value))
				{
					if (this._POSType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPOSIdChanging(value);
					this.SendPropertyChanging();
					this._POSId = value;
					this.SendPropertyChanged("POSId");
					this.OnPOSIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(1500)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreprocessedText", DbType="NVarChar(1500)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string PreprocessedText
		{
			get
			{
				return this._PreprocessedText;
			}
			set
			{
				if ((this._PreprocessedText != value))
				{
					this.OnPreprocessedTextChanging(value);
					this.SendPropertyChanging();
					this._PreprocessedText = value;
					this.SendPropertyChanged("PreprocessedText");
					this.OnPreprocessedTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Phrase_POSCode", Storage="_POSType", ThisKey="POSId", OtherKey="Id", IsForeignKey=true)]
		public POSType POSType
		{
			get
			{
				return this._POSType.Entity;
			}
			set
			{
				POSType previousValue = this._POSType.Entity;
				if (((previousValue != value) 
							|| (this._POSType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._POSType.Entity = null;
						previousValue.Phrase.Remove(this);
					}
					this._POSType.Entity = value;
					if ((value != null))
					{
						value.Phrase.Add(this);
						this._POSId = value.Id;
					}
					else
					{
						this._POSId = default(short);
					}
					this.SendPropertyChanged("POSType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhrasePolaritySentenceMapping_Phrase", Storage="_PhrasePolaritySentenceMapping", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public PhrasePolaritySentenceMapping PhrasePolaritySentenceMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._PhrasePolaritySentenceMapping.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._PhrasePolaritySentenceMapping.Entity;
			}
			set
			{
				PhrasePolaritySentenceMapping previousValue = this._PhrasePolaritySentenceMapping.Entity;
				if (((previousValue != value) 
							|| (this._PhrasePolaritySentenceMapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhrasePolaritySentenceMapping.Entity = null;
						previousValue.Phrase = null;
					}
					this._PhrasePolaritySentenceMapping.Entity = value;
					if ((value != null))
					{
						value.Phrase = this;
					}
					this.SendPropertyChanged("PhrasePolaritySentenceMapping");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhraseProductMapping_Phrase", Storage="_PhraseProductMapping", ThisKey="Id", OtherKey="PhraseId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<PhraseProductMapping> PhraseProductMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._PhraseProductMapping.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PhraseProductMapping;
			}
			set
			{
				this._PhraseProductMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhraseTermMapping_Phrase", Storage="_PhraseTermMapping", ThisKey="Id", OtherKey="PhraseId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<PhraseTermMapping> PhraseTermMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._PhraseTermMapping.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PhraseTermMapping;
			}
			set
			{
				this._PhraseTermMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SentencePhraseMapping_Sentence", Storage="_SentencePhraseMapping", ThisKey="Id", OtherKey="PhraseId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<SentencePhraseMapping> SentencePhraseMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._SentencePhraseMapping.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SentencePhraseMapping;
			}
			set
			{
				this._SentencePhraseMapping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhraseProductMapping(PhraseProductMapping entity)
		{
			this.SendPropertyChanging();
			entity.Phrase = this;
		}
		
		private void detach_PhraseProductMapping(PhraseProductMapping entity)
		{
			this.SendPropertyChanging();
			entity.Phrase = null;
		}
		
		private void attach_PhraseTermMapping(PhraseTermMapping entity)
		{
			this.SendPropertyChanging();
			entity.Phrase = this;
		}
		
		private void detach_PhraseTermMapping(PhraseTermMapping entity)
		{
			this.SendPropertyChanging();
			entity.Phrase = null;
		}
		
		private void attach_SentencePhraseMapping(SentencePhraseMapping entity)
		{
			this.SendPropertyChanging();
			entity.Phrase = this;
		}
		
		private void detach_SentencePhraseMapping(SentencePhraseMapping entity)
		{
			this.SendPropertyChanging();
			entity.Phrase = null;
		}
		
		private void Initialize()
		{
			this._POSType = default(EntityRef<POSType>);
			this._PhrasePolaritySentenceMapping = default(EntityRef<PhrasePolaritySentenceMapping>);
			this._PhraseProductMapping = new EntitySet<PhraseProductMapping>(new Action<PhraseProductMapping>(this.attach_PhraseProductMapping), new Action<PhraseProductMapping>(this.detach_PhraseProductMapping));
			this._PhraseTermMapping = new EntitySet<PhraseTermMapping>(new Action<PhraseTermMapping>(this.attach_PhraseTermMapping), new Action<PhraseTermMapping>(this.detach_PhraseTermMapping));
			this._SentencePhraseMapping = new EntitySet<SentencePhraseMapping>(new Action<SentencePhraseMapping>(this.attach_SentencePhraseMapping), new Action<SentencePhraseMapping>(this.detach_SentencePhraseMapping));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhrasePolaritySentenceMapping")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class PhrasePolaritySentenceMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PhraseId;
		
		private int _SentenceId;
		
		private System.Nullable<bool> _Polarity;
		
		private bool _IsManual;
		
		private EntityRef<Phrase> _Phrase;
		
		private EntityRef<Sentence> _Sentence;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPhraseIdChanging(int value);
    partial void OnPhraseIdChanged();
    partial void OnSentenceIdChanging(int value);
    partial void OnSentenceIdChanged();
    partial void OnPolarityChanging(System.Nullable<bool> value);
    partial void OnPolarityChanged();
    partial void OnIsManualChanging(bool value);
    partial void OnIsManualChanged();
    #endregion
		
		public PhrasePolaritySentenceMapping()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if ((this._Phrase.HasLoadedOrAssignedValue || this._Sentence.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhraseId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int PhraseId
		{
			get
			{
				return this._PhraseId;
			}
			set
			{
				if ((this._PhraseId != value))
				{
					this.OnPhraseIdChanging(value);
					this.SendPropertyChanging();
					this._PhraseId = value;
					this.SendPropertyChanged("PhraseId");
					this.OnPhraseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int SentenceId
		{
			get
			{
				return this._SentenceId;
			}
			set
			{
				if ((this._SentenceId != value))
				{
					this.OnSentenceIdChanging(value);
					this.SendPropertyChanging();
					this._SentenceId = value;
					this.SendPropertyChanged("SentenceId");
					this.OnSentenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Polarity", DbType="Bit")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<bool> Polarity
		{
			get
			{
				return this._Polarity;
			}
			set
			{
				if ((this._Polarity != value))
				{
					this.OnPolarityChanging(value);
					this.SendPropertyChanging();
					this._Polarity = value;
					this.SendPropertyChanged("Polarity");
					this.OnPolarityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsManual", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public bool IsManual
		{
			get
			{
				return this._IsManual;
			}
			set
			{
				if ((this._IsManual != value))
				{
					this.OnIsManualChanging(value);
					this.SendPropertyChanging();
					this._IsManual = value;
					this.SendPropertyChanged("IsManual");
					this.OnIsManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhrasePolaritySentenceMapping_Phrase", Storage="_Phrase", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Phrase Phrase
		{
			get
			{
				return this._Phrase.Entity;
			}
			set
			{
				Phrase previousValue = this._Phrase.Entity;
				if (((previousValue != value) 
							|| (this._Phrase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phrase.Entity = null;
						previousValue.PhrasePolaritySentenceMapping = null;
					}
					this._Phrase.Entity = value;
					if ((value != null))
					{
						value.PhrasePolaritySentenceMapping = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Phrase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhrasePolaritySentenceMapping_Sentence", Storage="_Sentence", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Sentence Sentence
		{
			get
			{
				return this._Sentence.Entity;
			}
			set
			{
				Sentence previousValue = this._Sentence.Entity;
				if (((previousValue != value) 
							|| (this._Sentence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sentence.Entity = null;
						previousValue.PhrasePolaritySentenceMapping = null;
					}
					this._Sentence.Entity = value;
					if ((value != null))
					{
						value.PhrasePolaritySentenceMapping = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Sentence");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Phrase = default(EntityRef<Phrase>);
			this._Sentence = default(EntityRef<Sentence>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhraseProductMapping")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class PhraseProductMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PhraseId;
		
		private int _ProductId;
		
		private string _PhraseText;
		
		private string _PhrasePreprocessedText;
		
		private int _Frequency;
		
		private System.Nullable<int> _Compactness;
		
		private System.Nullable<int> _PSupport;
		
		private bool _IsPruned;
		
		private bool _IsManual;
		
		private bool _IsFrequent;
		
		private int _PositiveReferences;
		
		private int _NegativeReferences;
		
		private int _NeutralReferences;
		
		private EntityRef<Phrase> _Phrase;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPhraseIdChanging(int value);
    partial void OnPhraseIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnPhraseTextChanging(string value);
    partial void OnPhraseTextChanged();
    partial void OnPhrasePreprocessedTextChanging(string value);
    partial void OnPhrasePreprocessedTextChanged();
    partial void OnFrequencyChanging(int value);
    partial void OnFrequencyChanged();
    partial void OnCompactnessChanging(System.Nullable<int> value);
    partial void OnCompactnessChanged();
    partial void OnPSupportChanging(System.Nullable<int> value);
    partial void OnPSupportChanged();
    partial void OnIsPrunedChanging(bool value);
    partial void OnIsPrunedChanged();
    partial void OnIsManualChanging(bool value);
    partial void OnIsManualChanged();
    partial void OnIsFrequentChanging(bool value);
    partial void OnIsFrequentChanged();
    partial void OnPositiveReferencesChanging(int value);
    partial void OnPositiveReferencesChanged();
    partial void OnNegativeReferencesChanging(int value);
    partial void OnNegativeReferencesChanged();
    partial void OnNeutralReferencesChanging(int value);
    partial void OnNeutralReferencesChanged();
    #endregion
		
		public PhraseProductMapping()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhraseId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int PhraseId
		{
			get
			{
				return this._PhraseId;
			}
			set
			{
				if ((this._PhraseId != value))
				{
					if (this._Phrase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhraseIdChanging(value);
					this.SendPropertyChanging();
					this._PhraseId = value;
					this.SendPropertyChanged("PhraseId");
					this.OnPhraseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhraseText", DbType="NVarChar(1500)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string PhraseText
		{
			get
			{
				return this._PhraseText;
			}
			set
			{
				if ((this._PhraseText != value))
				{
					this.OnPhraseTextChanging(value);
					this.SendPropertyChanging();
					this._PhraseText = value;
					this.SendPropertyChanged("PhraseText");
					this.OnPhraseTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhrasePreprocessedText", DbType="NVarChar(1500)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string PhrasePreprocessedText
		{
			get
			{
				return this._PhrasePreprocessedText;
			}
			set
			{
				if ((this._PhrasePreprocessedText != value))
				{
					this.OnPhrasePreprocessedTextChanging(value);
					this.SendPropertyChanging();
					this._PhrasePreprocessedText = value;
					this.SendPropertyChanged("PhrasePreprocessedText");
					this.OnPhrasePreprocessedTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public int Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Compactness", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Nullable<int> Compactness
		{
			get
			{
				return this._Compactness;
			}
			set
			{
				if ((this._Compactness != value))
				{
					this.OnCompactnessChanging(value);
					this.SendPropertyChanging();
					this._Compactness = value;
					this.SendPropertyChanged("Compactness");
					this.OnCompactnessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PSupport", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Nullable<int> PSupport
		{
			get
			{
				return this._PSupport;
			}
			set
			{
				if ((this._PSupport != value))
				{
					this.OnPSupportChanging(value);
					this.SendPropertyChanging();
					this._PSupport = value;
					this.SendPropertyChanged("PSupport");
					this.OnPSupportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPruned", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public bool IsPruned
		{
			get
			{
				return this._IsPruned;
			}
			set
			{
				if ((this._IsPruned != value))
				{
					this.OnIsPrunedChanging(value);
					this.SendPropertyChanging();
					this._IsPruned = value;
					this.SendPropertyChanged("IsPruned");
					this.OnIsPrunedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsManual", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public bool IsManual
		{
			get
			{
				return this._IsManual;
			}
			set
			{
				if ((this._IsManual != value))
				{
					this.OnIsManualChanging(value);
					this.SendPropertyChanging();
					this._IsManual = value;
					this.SendPropertyChanged("IsManual");
					this.OnIsManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFrequent", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public bool IsFrequent
		{
			get
			{
				return this._IsFrequent;
			}
			set
			{
				if ((this._IsFrequent != value))
				{
					this.OnIsFrequentChanging(value);
					this.SendPropertyChanging();
					this._IsFrequent = value;
					this.SendPropertyChanged("IsFrequent");
					this.OnIsFrequentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositiveReferences", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12)]
		public int PositiveReferences
		{
			get
			{
				return this._PositiveReferences;
			}
			set
			{
				if ((this._PositiveReferences != value))
				{
					this.OnPositiveReferencesChanging(value);
					this.SendPropertyChanging();
					this._PositiveReferences = value;
					this.SendPropertyChanged("PositiveReferences");
					this.OnPositiveReferencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NegativeReferences", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13)]
		public int NegativeReferences
		{
			get
			{
				return this._NegativeReferences;
			}
			set
			{
				if ((this._NegativeReferences != value))
				{
					this.OnNegativeReferencesChanging(value);
					this.SendPropertyChanging();
					this._NegativeReferences = value;
					this.SendPropertyChanged("NegativeReferences");
					this.OnNegativeReferencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NeutralReferences", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14)]
		public int NeutralReferences
		{
			get
			{
				return this._NeutralReferences;
			}
			set
			{
				if ((this._NeutralReferences != value))
				{
					this.OnNeutralReferencesChanging(value);
					this.SendPropertyChanging();
					this._NeutralReferences = value;
					this.SendPropertyChanged("NeutralReferences");
					this.OnNeutralReferencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhraseProductMapping_Phrase", Storage="_Phrase", ThisKey="PhraseId", OtherKey="Id", IsForeignKey=true)]
		public Phrase Phrase
		{
			get
			{
				return this._Phrase.Entity;
			}
			set
			{
				Phrase previousValue = this._Phrase.Entity;
				if (((previousValue != value) 
							|| (this._Phrase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phrase.Entity = null;
						previousValue.PhraseProductMapping.Remove(this);
					}
					this._Phrase.Entity = value;
					if ((value != null))
					{
						value.PhraseProductMapping.Add(this);
						this._PhraseId = value.Id;
					}
					else
					{
						this._PhraseId = default(int);
					}
					this.SendPropertyChanged("Phrase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhraseProductMapping_Product", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.PhraseProductMapping.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.PhraseProductMapping.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Phrase = default(EntityRef<Phrase>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhraseTermMapping")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class PhraseTermMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PhraseId;
		
		private int _TermId;
		
		private EntityRef<Phrase> _Phrase;
		
		private EntityRef<Term> _Term;
		
		private EntitySet<SentencePhraseTermMapping> _SentencePhraseTermMapping;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPhraseIdChanging(int value);
    partial void OnPhraseIdChanged();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    #endregion
		
		public PhraseTermMapping()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhraseId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int PhraseId
		{
			get
			{
				return this._PhraseId;
			}
			set
			{
				if ((this._PhraseId != value))
				{
					if (this._Phrase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhraseIdChanging(value);
					this.SendPropertyChanging();
					this._PhraseId = value;
					this.SendPropertyChanged("PhraseId");
					this.OnPhraseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhraseTermMapping_Phrase", Storage="_Phrase", ThisKey="PhraseId", OtherKey="Id", IsForeignKey=true)]
		public Phrase Phrase
		{
			get
			{
				return this._Phrase.Entity;
			}
			set
			{
				Phrase previousValue = this._Phrase.Entity;
				if (((previousValue != value) 
							|| (this._Phrase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phrase.Entity = null;
						previousValue.PhraseTermMapping.Remove(this);
					}
					this._Phrase.Entity = value;
					if ((value != null))
					{
						value.PhraseTermMapping.Add(this);
						this._PhraseId = value.Id;
					}
					else
					{
						this._PhraseId = default(int);
					}
					this.SendPropertyChanged("Phrase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhraseTermMapping_Term", Storage="_Term", ThisKey="TermId", OtherKey="Id", IsForeignKey=true)]
		public Term Term
		{
			get
			{
				return this._Term.Entity;
			}
			set
			{
				Term previousValue = this._Term.Entity;
				if (((previousValue != value) 
							|| (this._Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Term.Entity = null;
						previousValue.PhraseTermMapping.Remove(this);
					}
					this._Term.Entity = value;
					if ((value != null))
					{
						value.PhraseTermMapping.Add(this);
						this._TermId = value.Id;
					}
					else
					{
						this._TermId = default(int);
					}
					this.SendPropertyChanged("Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SentencePhraseTermMapping_PhraseTermMapping", Storage="_SentencePhraseTermMapping", ThisKey="Id", OtherKey="PhraseTermId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<SentencePhraseTermMapping> SentencePhraseTermMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._SentencePhraseTermMapping.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SentencePhraseTermMapping;
			}
			set
			{
				this._SentencePhraseTermMapping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SentencePhraseTermMapping(SentencePhraseTermMapping entity)
		{
			this.SendPropertyChanging();
			entity.PhraseTermMapping = this;
		}
		
		private void detach_SentencePhraseTermMapping(SentencePhraseTermMapping entity)
		{
			this.SendPropertyChanging();
			entity.PhraseTermMapping = null;
		}
		
		private void Initialize()
		{
			this._Phrase = default(EntityRef<Phrase>);
			this._Term = default(EntityRef<Term>);
			this._SentencePhraseTermMapping = new EntitySet<SentencePhraseTermMapping>(new Action<SentencePhraseTermMapping>(this.attach_SentencePhraseTermMapping), new Action<SentencePhraseTermMapping>(this.detach_SentencePhraseTermMapping));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POSType")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class POSType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Type;
		
		private EntitySet<Phrase> _Phrase;
		
		private EntitySet<Term> _Term;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public POSType()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Phrase_POSCode", Storage="_Phrase", ThisKey="Id", OtherKey="POSId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<Phrase> Phrase
		{
			get
			{
				if ((this.serializing 
							&& (this._Phrase.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Phrase;
			}
			set
			{
				this._Phrase.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Term_POSCode", Storage="_Term", ThisKey="Id", OtherKey="POSId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Term> Term
		{
			get
			{
				if ((this.serializing 
							&& (this._Term.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Term;
			}
			set
			{
				this._Term.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Phrase(Phrase entity)
		{
			this.SendPropertyChanging();
			entity.POSType = this;
		}
		
		private void detach_Phrase(Phrase entity)
		{
			this.SendPropertyChanging();
			entity.POSType = null;
		}
		
		private void attach_Term(Term entity)
		{
			this.SendPropertyChanging();
			entity.POSType = this;
		}
		
		private void detach_Term(Term entity)
		{
			this.SendPropertyChanging();
			entity.POSType = null;
		}
		
		private void Initialize()
		{
			this._Phrase = new EntitySet<Phrase>(new Action<Phrase>(this.attach_Phrase), new Action<Phrase>(this.detach_Phrase));
			this._Term = new EntitySet<Term>(new Action<Term>(this.attach_Term), new Action<Term>(this.detach_Term));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private EntitySet<PhraseProductMapping> _PhraseProductMapping;
		
		private EntitySet<Review> _Review;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Product()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(1000)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhraseProductMapping_Product", Storage="_PhraseProductMapping", ThisKey="Id", OtherKey="ProductId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<PhraseProductMapping> PhraseProductMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._PhraseProductMapping.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PhraseProductMapping;
			}
			set
			{
				this._PhraseProductMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Review_Product", Storage="_Review", ThisKey="Id", OtherKey="ProductId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<Review> Review
		{
			get
			{
				if ((this.serializing 
							&& (this._Review.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Review;
			}
			set
			{
				this._Review.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhraseProductMapping(PhraseProductMapping entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_PhraseProductMapping(PhraseProductMapping entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Review(Review entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Review(Review entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void Initialize()
		{
			this._PhraseProductMapping = new EntitySet<PhraseProductMapping>(new Action<PhraseProductMapping>(this.attach_PhraseProductMapping), new Action<PhraseProductMapping>(this.detach_PhraseProductMapping));
			this._Review = new EntitySet<Review>(new Action<Review>(this.attach_Review), new Action<Review>(this.detach_Review));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Review")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProductId;
		
		private string _Title;
		
		private EntityRef<Product> _Product;
		
		private EntitySet<Sentence> _Sentence;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Review()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(1000)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Review_Product", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Review.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Review.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Sentence_Review", Storage="_Sentence", ThisKey="Id", OtherKey="ReviewId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Sentence> Sentence
		{
			get
			{
				if ((this.serializing 
							&& (this._Sentence.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Sentence;
			}
			set
			{
				this._Sentence.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sentence(Sentence entity)
		{
			this.SendPropertyChanging();
			entity.Review = this;
		}
		
		private void detach_Sentence(Sentence entity)
		{
			this.SendPropertyChanging();
			entity.Review = null;
		}
		
		private void Initialize()
		{
			this._Product = default(EntityRef<Product>);
			this._Sentence = new EntitySet<Sentence>(new Action<Sentence>(this.attach_Sentence), new Action<Sentence>(this.detach_Sentence));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sentence")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Sentence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ReviewId;
		
		private int _DatasetTypeId;
		
		private string _Text;
		
		private string _TextPOS;
		
		private string _ManualResults;
		
		private EntityRef<PhrasePolaritySentenceMapping> _PhrasePolaritySentenceMapping;
		
		private EntityRef<DatasetType> _DatasetType;
		
		private EntityRef<Review> _Review;
		
		private EntitySet<SentencePhraseMapping> _SentencePhraseMapping;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReviewIdChanging(int value);
    partial void OnReviewIdChanged();
    partial void OnDatasetTypeIdChanging(int value);
    partial void OnDatasetTypeIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTextPOSChanging(string value);
    partial void OnTextPOSChanged();
    partial void OnManualResultsChanging(string value);
    partial void OnManualResultsChanged();
    #endregion
		
		public Sentence()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ReviewId
		{
			get
			{
				return this._ReviewId;
			}
			set
			{
				if ((this._ReviewId != value))
				{
					if (this._Review.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewIdChanging(value);
					this.SendPropertyChanging();
					this._ReviewId = value;
					this.SendPropertyChanged("ReviewId");
					this.OnReviewIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatasetTypeId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int DatasetTypeId
		{
			get
			{
				return this._DatasetTypeId;
			}
			set
			{
				if ((this._DatasetTypeId != value))
				{
					if (this._DatasetType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatasetTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DatasetTypeId = value;
					this.SendPropertyChanged("DatasetTypeId");
					this.OnDatasetTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextPOS", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string TextPOS
		{
			get
			{
				return this._TextPOS;
			}
			set
			{
				if ((this._TextPOS != value))
				{
					this.OnTextPOSChanging(value);
					this.SendPropertyChanging();
					this._TextPOS = value;
					this.SendPropertyChanged("TextPOS");
					this.OnTextPOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualResults", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string ManualResults
		{
			get
			{
				return this._ManualResults;
			}
			set
			{
				if ((this._ManualResults != value))
				{
					this.OnManualResultsChanging(value);
					this.SendPropertyChanging();
					this._ManualResults = value;
					this.SendPropertyChanged("ManualResults");
					this.OnManualResultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhrasePolaritySentenceMapping_Sentence", Storage="_PhrasePolaritySentenceMapping", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public PhrasePolaritySentenceMapping PhrasePolaritySentenceMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._PhrasePolaritySentenceMapping.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._PhrasePolaritySentenceMapping.Entity;
			}
			set
			{
				PhrasePolaritySentenceMapping previousValue = this._PhrasePolaritySentenceMapping.Entity;
				if (((previousValue != value) 
							|| (this._PhrasePolaritySentenceMapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhrasePolaritySentenceMapping.Entity = null;
						previousValue.Sentence = null;
					}
					this._PhrasePolaritySentenceMapping.Entity = value;
					if ((value != null))
					{
						value.Sentence = this;
					}
					this.SendPropertyChanged("PhrasePolaritySentenceMapping");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Sentence_DatasetType", Storage="_DatasetType", ThisKey="DatasetTypeId", OtherKey="Id", IsForeignKey=true)]
		public DatasetType DatasetType
		{
			get
			{
				return this._DatasetType.Entity;
			}
			set
			{
				DatasetType previousValue = this._DatasetType.Entity;
				if (((previousValue != value) 
							|| (this._DatasetType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DatasetType.Entity = null;
						previousValue.Sentence.Remove(this);
					}
					this._DatasetType.Entity = value;
					if ((value != null))
					{
						value.Sentence.Add(this);
						this._DatasetTypeId = value.Id;
					}
					else
					{
						this._DatasetTypeId = default(int);
					}
					this.SendPropertyChanged("DatasetType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Sentence_Review", Storage="_Review", ThisKey="ReviewId", OtherKey="Id", IsForeignKey=true)]
		public Review Review
		{
			get
			{
				return this._Review.Entity;
			}
			set
			{
				Review previousValue = this._Review.Entity;
				if (((previousValue != value) 
							|| (this._Review.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Review.Entity = null;
						previousValue.Sentence.Remove(this);
					}
					this._Review.Entity = value;
					if ((value != null))
					{
						value.Sentence.Add(this);
						this._ReviewId = value.Id;
					}
					else
					{
						this._ReviewId = default(int);
					}
					this.SendPropertyChanged("Review");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SentencePhraseMapping_Sentence1", Storage="_SentencePhraseMapping", ThisKey="Id", OtherKey="SentenceId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<SentencePhraseMapping> SentencePhraseMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._SentencePhraseMapping.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SentencePhraseMapping;
			}
			set
			{
				this._SentencePhraseMapping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SentencePhraseMapping(SentencePhraseMapping entity)
		{
			this.SendPropertyChanging();
			entity.Sentence = this;
		}
		
		private void detach_SentencePhraseMapping(SentencePhraseMapping entity)
		{
			this.SendPropertyChanging();
			entity.Sentence = null;
		}
		
		private void Initialize()
		{
			this._PhrasePolaritySentenceMapping = default(EntityRef<PhrasePolaritySentenceMapping>);
			this._DatasetType = default(EntityRef<DatasetType>);
			this._Review = default(EntityRef<Review>);
			this._SentencePhraseMapping = new EntitySet<SentencePhraseMapping>(new Action<SentencePhraseMapping>(this.attach_SentencePhraseMapping), new Action<SentencePhraseMapping>(this.detach_SentencePhraseMapping));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SentencePhraseMapping")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class SentencePhraseMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SentenceId;
		
		private int _PhraseId;
		
		private bool _IsGenerated;
		
		private EntityRef<Phrase> _Phrase;
		
		private EntityRef<Sentence> _Sentence;
		
		private EntitySet<SentencePhraseTermMapping> _SentencePhraseTermMapping;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSentenceIdChanging(int value);
    partial void OnSentenceIdChanged();
    partial void OnPhraseIdChanging(int value);
    partial void OnPhraseIdChanged();
    partial void OnIsGeneratedChanging(bool value);
    partial void OnIsGeneratedChanged();
    #endregion
		
		public SentencePhraseMapping()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int SentenceId
		{
			get
			{
				return this._SentenceId;
			}
			set
			{
				if ((this._SentenceId != value))
				{
					if (this._Sentence.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSentenceIdChanging(value);
					this.SendPropertyChanging();
					this._SentenceId = value;
					this.SendPropertyChanged("SentenceId");
					this.OnSentenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhraseId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int PhraseId
		{
			get
			{
				return this._PhraseId;
			}
			set
			{
				if ((this._PhraseId != value))
				{
					if (this._Phrase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhraseIdChanging(value);
					this.SendPropertyChanging();
					this._PhraseId = value;
					this.SendPropertyChanged("PhraseId");
					this.OnPhraseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsGenerated", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public bool IsGenerated
		{
			get
			{
				return this._IsGenerated;
			}
			set
			{
				if ((this._IsGenerated != value))
				{
					this.OnIsGeneratedChanging(value);
					this.SendPropertyChanging();
					this._IsGenerated = value;
					this.SendPropertyChanged("IsGenerated");
					this.OnIsGeneratedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SentencePhraseMapping_Sentence", Storage="_Phrase", ThisKey="PhraseId", OtherKey="Id", IsForeignKey=true)]
		public Phrase Phrase
		{
			get
			{
				return this._Phrase.Entity;
			}
			set
			{
				Phrase previousValue = this._Phrase.Entity;
				if (((previousValue != value) 
							|| (this._Phrase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phrase.Entity = null;
						previousValue.SentencePhraseMapping.Remove(this);
					}
					this._Phrase.Entity = value;
					if ((value != null))
					{
						value.SentencePhraseMapping.Add(this);
						this._PhraseId = value.Id;
					}
					else
					{
						this._PhraseId = default(int);
					}
					this.SendPropertyChanged("Phrase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SentencePhraseMapping_Sentence1", Storage="_Sentence", ThisKey="SentenceId", OtherKey="Id", IsForeignKey=true)]
		public Sentence Sentence
		{
			get
			{
				return this._Sentence.Entity;
			}
			set
			{
				Sentence previousValue = this._Sentence.Entity;
				if (((previousValue != value) 
							|| (this._Sentence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sentence.Entity = null;
						previousValue.SentencePhraseMapping.Remove(this);
					}
					this._Sentence.Entity = value;
					if ((value != null))
					{
						value.SentencePhraseMapping.Add(this);
						this._SentenceId = value.Id;
					}
					else
					{
						this._SentenceId = default(int);
					}
					this.SendPropertyChanged("Sentence");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SentencePhraseTermMapping_SentencePhraseMapping", Storage="_SentencePhraseTermMapping", ThisKey="Id", OtherKey="SentencePhraseId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<SentencePhraseTermMapping> SentencePhraseTermMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._SentencePhraseTermMapping.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._SentencePhraseTermMapping;
			}
			set
			{
				this._SentencePhraseTermMapping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SentencePhraseTermMapping(SentencePhraseTermMapping entity)
		{
			this.SendPropertyChanging();
			entity.SentencePhraseMapping = this;
		}
		
		private void detach_SentencePhraseTermMapping(SentencePhraseTermMapping entity)
		{
			this.SendPropertyChanging();
			entity.SentencePhraseMapping = null;
		}
		
		private void Initialize()
		{
			this._Phrase = default(EntityRef<Phrase>);
			this._Sentence = default(EntityRef<Sentence>);
			this._SentencePhraseTermMapping = new EntitySet<SentencePhraseTermMapping>(new Action<SentencePhraseTermMapping>(this.attach_SentencePhraseTermMapping), new Action<SentencePhraseTermMapping>(this.detach_SentencePhraseTermMapping));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SentencePhraseTermMapping")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class SentencePhraseTermMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SentencePhraseId;
		
		private int _PhraseTermId;
		
		private System.Nullable<int> _TermOrder;
		
		private EntityRef<PhraseTermMapping> _PhraseTermMapping;
		
		private EntityRef<SentencePhraseMapping> _SentencePhraseMapping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSentencePhraseIdChanging(int value);
    partial void OnSentencePhraseIdChanged();
    partial void OnPhraseTermIdChanging(int value);
    partial void OnPhraseTermIdChanged();
    partial void OnTermOrderChanging(System.Nullable<int> value);
    partial void OnTermOrderChanged();
    #endregion
		
		public SentencePhraseTermMapping()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentencePhraseId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int SentencePhraseId
		{
			get
			{
				return this._SentencePhraseId;
			}
			set
			{
				if ((this._SentencePhraseId != value))
				{
					if (this._SentencePhraseMapping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSentencePhraseIdChanging(value);
					this.SendPropertyChanging();
					this._SentencePhraseId = value;
					this.SendPropertyChanged("SentencePhraseId");
					this.OnSentencePhraseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhraseTermId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int PhraseTermId
		{
			get
			{
				return this._PhraseTermId;
			}
			set
			{
				if ((this._PhraseTermId != value))
				{
					if (this._PhraseTermMapping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhraseTermIdChanging(value);
					this.SendPropertyChanging();
					this._PhraseTermId = value;
					this.SendPropertyChanged("PhraseTermId");
					this.OnPhraseTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermOrder", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<int> TermOrder
		{
			get
			{
				return this._TermOrder;
			}
			set
			{
				if ((this._TermOrder != value))
				{
					this.OnTermOrderChanging(value);
					this.SendPropertyChanging();
					this._TermOrder = value;
					this.SendPropertyChanged("TermOrder");
					this.OnTermOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SentencePhraseTermMapping_PhraseTermMapping", Storage="_PhraseTermMapping", ThisKey="PhraseTermId", OtherKey="Id", IsForeignKey=true)]
		public PhraseTermMapping PhraseTermMapping
		{
			get
			{
				return this._PhraseTermMapping.Entity;
			}
			set
			{
				PhraseTermMapping previousValue = this._PhraseTermMapping.Entity;
				if (((previousValue != value) 
							|| (this._PhraseTermMapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhraseTermMapping.Entity = null;
						previousValue.SentencePhraseTermMapping.Remove(this);
					}
					this._PhraseTermMapping.Entity = value;
					if ((value != null))
					{
						value.SentencePhraseTermMapping.Add(this);
						this._PhraseTermId = value.Id;
					}
					else
					{
						this._PhraseTermId = default(int);
					}
					this.SendPropertyChanged("PhraseTermMapping");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SentencePhraseTermMapping_SentencePhraseMapping", Storage="_SentencePhraseMapping", ThisKey="SentencePhraseId", OtherKey="Id", IsForeignKey=true)]
		public SentencePhraseMapping SentencePhraseMapping
		{
			get
			{
				return this._SentencePhraseMapping.Entity;
			}
			set
			{
				SentencePhraseMapping previousValue = this._SentencePhraseMapping.Entity;
				if (((previousValue != value) 
							|| (this._SentencePhraseMapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SentencePhraseMapping.Entity = null;
						previousValue.SentencePhraseTermMapping.Remove(this);
					}
					this._SentencePhraseMapping.Entity = value;
					if ((value != null))
					{
						value.SentencePhraseTermMapping.Add(this);
						this._SentencePhraseId = value.Id;
					}
					else
					{
						this._SentencePhraseId = default(int);
					}
					this.SendPropertyChanged("SentencePhraseMapping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._PhraseTermMapping = default(EntityRef<PhraseTermMapping>);
			this._SentencePhraseMapping = default(EntityRef<SentencePhraseMapping>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Term")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private short _POSId;
		
		private string _Text;
		
		private string _PreprocessedText;
		
		private EntitySet<PhraseTermMapping> _PhraseTermMapping;
		
		private EntityRef<POSType> _POSType;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPOSIdChanging(short value);
    partial void OnPOSIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnPreprocessedTextChanging(string value);
    partial void OnPreprocessedTextChanged();
    #endregion
		
		public Term()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POSId", DbType="SmallInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public short POSId
		{
			get
			{
				return this._POSId;
			}
			set
			{
				if ((this._POSId != value))
				{
					if (this._POSType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPOSIdChanging(value);
					this.SendPropertyChanging();
					this._POSId = value;
					this.SendPropertyChanged("POSId");
					this.OnPOSIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(500)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreprocessedText", DbType="NVarChar(500)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string PreprocessedText
		{
			get
			{
				return this._PreprocessedText;
			}
			set
			{
				if ((this._PreprocessedText != value))
				{
					this.OnPreprocessedTextChanging(value);
					this.SendPropertyChanging();
					this._PreprocessedText = value;
					this.SendPropertyChanged("PreprocessedText");
					this.OnPreprocessedTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_PhraseTermMapping_Term", Storage="_PhraseTermMapping", ThisKey="Id", OtherKey="TermId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<PhraseTermMapping> PhraseTermMapping
		{
			get
			{
				if ((this.serializing 
							&& (this._PhraseTermMapping.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PhraseTermMapping;
			}
			set
			{
				this._PhraseTermMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Term_POSCode", Storage="_POSType", ThisKey="POSId", OtherKey="Id", IsForeignKey=true)]
		public POSType POSType
		{
			get
			{
				return this._POSType.Entity;
			}
			set
			{
				POSType previousValue = this._POSType.Entity;
				if (((previousValue != value) 
							|| (this._POSType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._POSType.Entity = null;
						previousValue.Term.Remove(this);
					}
					this._POSType.Entity = value;
					if ((value != null))
					{
						value.Term.Add(this);
						this._POSId = value.Id;
					}
					else
					{
						this._POSId = default(short);
					}
					this.SendPropertyChanged("POSType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhraseTermMapping(PhraseTermMapping entity)
		{
			this.SendPropertyChanging();
			entity.Term = this;
		}
		
		private void detach_PhraseTermMapping(PhraseTermMapping entity)
		{
			this.SendPropertyChanging();
			entity.Term = null;
		}
		
		private void Initialize()
		{
			this._PhraseTermMapping = new EntitySet<PhraseTermMapping>(new Action<PhraseTermMapping>(this.attach_PhraseTermMapping), new Action<PhraseTermMapping>(this.detach_PhraseTermMapping));
			this._POSType = default(EntityRef<POSType>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Sp_helpdiagramdefinitionResult
	{
		
		private System.Nullable<int> _Version;
		
		private System.Data.Linq.Binary _Definition;
		
		public Sp_helpdiagramdefinitionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="version", Storage="_Version", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="definition", Storage="_Definition", DbType="VarBinary(MAX)", CanBeNull=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Data.Linq.Binary Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this._Definition = value;
				}
			}
		}
	}
	
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Sp_helpdiagramsResult
	{
		
		private string _Database;
		
		private string _Name;
		
		private System.Nullable<int> _ID;
		
		private string _Owner;
		
		private System.Nullable<int> _OwnerID;
		
		public Sp_helpdiagramsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Database", DbType="NVarChar(128)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Database
		{
			get
			{
				return this._Database;
			}
			set
			{
				if ((this._Database != value))
				{
					this._Database = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="NVarChar(128)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this._Owner = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
